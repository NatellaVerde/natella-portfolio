{"ast":null,"code":"import { createAction, createSlice } from \"@reduxjs/toolkit\";\nimport cardService from \"../services/cards.service\";\nconst cardsSlice = createSlice({\n  name: \"cards\",\n  initialState: {\n    entities: null,\n    isLoading: true,\n    error: null\n  },\n  reducers: {\n    cardsRequested: state => {\n      state.isLoading = true;\n    },\n    cardsReceived: (state, action) => {\n      state.entities = action.payload;\n      state.isLoading = false;\n    },\n    cardsRequestFiled: (state, action) => {\n      state.error = action.payload;\n      state.isLoading = false;\n    },\n    cardCreated: (state, action) => {\n      state.entities.unshift(action.payload);\n    },\n    cardEdited: (state, action) => {\n      state.entities[state.entities.findIndex(u => u._id === action.payload._id)] = action.payload;\n    },\n    cardRemoved: (state, action) => {\n      state.entities = state.entities.filter(c => c._id !== action.payload);\n    }\n  }\n});\nconst {\n  reducer: cardsReducer,\n  actions\n} = cardsSlice;\nconst {\n  cardsRequested,\n  cardsReceived,\n  cardsRequestFiled,\n  cardCreated,\n  cardRemoved\n} = actions;\nconst addCardRequested = createAction(\"cards/addCardRequested\");\nconst removeCardRequested = createAction(\"cards/removeCardRequested\");\nexport const loadCardsList = () => async dispatch => {\n  dispatch(cardsRequested());\n  try {\n    const {\n      content\n    } = await cardService.getCards();\n    dispatch(cardsReceived(content));\n  } catch (error) {\n    dispatch(cardsRequestFiled(error.message));\n  }\n};\nexport const createCard = payload => async (dispatch, getState) => {\n  dispatch(addCardRequested());\n  try {\n    const {\n      content\n    } = await cardService.createCard(payload);\n    dispatch(cardCreated(content));\n  } catch (error) {\n    dispatch(cardsRequestFiled(error.message));\n  }\n};\nexport const removeCard = cardId => async dispatch => {\n  dispatch(removeCardRequested());\n  try {\n    const {\n      content\n    } = await cardService.removeCard(cardId);\n    if (!content) {\n      dispatch(cardRemoved(cardId));\n    }\n  } catch (error) {\n    dispatch(cardsRequestFiled(error.message));\n  }\n};\nexport const getCards = () => state => state.cards.entities;\nexport const getCardsLoadingStatus = () => state => state.cards.isLoading;\nexport default cardsReducer;","map":{"version":3,"names":["createAction","createSlice","cardService","cardsSlice","name","initialState","entities","isLoading","error","reducers","cardsRequested","state","cardsReceived","action","payload","cardsRequestFiled","cardCreated","unshift","cardEdited","findIndex","u","_id","cardRemoved","filter","c","reducer","cardsReducer","actions","addCardRequested","removeCardRequested","loadCardsList","dispatch","content","getCards","message","createCard","getState","removeCard","cardId","cards","getCardsLoadingStatus"],"sources":["/Users/natellaverde/Проекты/MC_Portfolio/src/app/store/cards.js"],"sourcesContent":["import { createAction, createSlice } from \"@reduxjs/toolkit\";\nimport cardService from \"../services/cards.service\";\nconst cardsSlice = createSlice({\n    name: \"cards\",\n    initialState: {\n        entities: null,\n        isLoading: true,\n        error: null\n    },\n    reducers: {\n        cardsRequested: (state) => {\n            state.isLoading = true;\n        },\n        cardsReceived: (state, action) => {\n            state.entities = action.payload;\n            state.isLoading = false;\n        },\n        cardsRequestFiled: (state, action) => {\n            state.error = action.payload;\n            state.isLoading = false;\n        },\n        cardCreated: (state, action) => {\n            state.entities.unshift(action.payload);\n        },\n        cardEdited: (state, action) => {\n            state.entities[\n                state.entities.findIndex((u) => u._id === action.payload._id)\n                ] = action.payload;\n        },\n        cardRemoved: (state, action) => {\n            state.entities = state.entities.filter(\n                (c) => c._id !== action.payload\n            );\n        }\n    }\n});\n\nconst { reducer: cardsReducer, actions } = cardsSlice;\nconst {\n    cardsRequested,\n    cardsReceived,\n    cardsRequestFiled,\n    cardCreated,\n    cardRemoved\n} = actions;\n\nconst addCardRequested = createAction(\"cards/addCardRequested\");\nconst removeCardRequested = createAction(\"cards/removeCardRequested\");\n\nexport const loadCardsList = () => async (dispatch) => {\n    dispatch(cardsRequested());\n    try {\n        const { content } = await cardService.getCards();\n        dispatch(cardsReceived(content));\n    } catch (error) {\n        dispatch(cardsRequestFiled(error.message));\n    }\n};\nexport const createCard = (payload) => async (dispatch, getState) => {\n    dispatch(addCardRequested());\n    try {\n        const { content } = await cardService.createCard(payload);\n        dispatch(cardCreated(content));\n    } catch (error) {\n        dispatch(cardsRequestFiled(error.message));\n    }\n};\nexport const removeCard = (cardId) => async (dispatch) => {\n    dispatch(removeCardRequested());\n    try {\n        const { content } = await cardService.removeCard(cardId);\n        if (!content) {\n            dispatch(cardRemoved(cardId));\n        }\n    } catch (error) {\n        dispatch(cardsRequestFiled(error.message));\n    }\n};\n\nexport const getCards = () => (state) => state.cards.entities;\nexport const getCardsLoadingStatus = () => (state) =>\n    state.cards.isLoading;\n\nexport default cardsReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}