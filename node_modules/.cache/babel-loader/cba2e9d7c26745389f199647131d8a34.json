{"ast":null,"code":"import { createAction, createSlice } from \"@reduxjs/toolkit\";\nimport commentService from \"../services/comment.service\";\nconst commentsSlice = createSlice({\n  name: \"comments\",\n  initialState: {\n    entities: null,\n    isLoading: true,\n    error: null\n  },\n  reducers: {\n    commentsRequested: state => {\n      state.isLoading = true;\n    },\n    commentsReceived: (state, action) => {\n      state.entities = action.payload;\n      state.isLoading = false;\n    },\n    commentsRequestFiled: (state, action) => {\n      state.error = action.payload;\n      state.isLoading = false;\n    },\n    commentCreated: (state, action) => {\n      state.entities.push(action.payload);\n    },\n    commentRemoved: (state, action) => {\n      state.entities = state.entities.filter(c => c._id !== action.payload);\n    }\n  }\n});\nconst {\n  reducer: commentsReducer,\n  actions\n} = commentsSlice;\nconst {\n  commentsRequested,\n  commentsReceived,\n  commentsRequestFiled,\n  commentCreated,\n  commentRemoved\n} = actions;\nconst addCommentRequested = createAction(\"comments/addCommentRequested\");\nconst removeCommentRequested = createAction(\"comments/removeCommentRequested\");\nexport const loadCommentsList = userId => async dispatch => {\n  dispatch(commentsRequested());\n  try {\n    const {\n      content\n    } = await commentService.getComments(userId);\n    dispatch(commentsReceived(content));\n  } catch (error) {\n    dispatch(commentsRequestFiled(error.message));\n  }\n};\nexport const createComment = payload => async (dispatch, getState) => {\n  dispatch(addCommentRequested());\n  try {\n    const {\n      content\n    } = await commentService.createComment(payload);\n    dispatch(commentCreated(content));\n  } catch (error) {\n    dispatch(commentsRequestFiled(error.message));\n  }\n};\nexport const removeComment = commentId => async dispatch => {\n  dispatch(removeCommentRequested());\n  try {\n    const {\n      content\n    } = await commentService.removeComment(commentId);\n    if (!content) {\n      dispatch(commentRemoved(commentId));\n    }\n  } catch (error) {\n    dispatch(commentsRequestFiled(error.message));\n  }\n};\nexport const getComments = () => state => state.comments.entities;\nexport const getCommentsLoadingStatus = () => state => state.comments.isLoading;\nexport default commentsReducer;","map":{"version":3,"names":["createAction","createSlice","commentService","commentsSlice","name","initialState","entities","isLoading","error","reducers","commentsRequested","state","commentsReceived","action","payload","commentsRequestFiled","commentCreated","push","commentRemoved","filter","c","_id","reducer","commentsReducer","actions","addCommentRequested","removeCommentRequested","loadCommentsList","userId","dispatch","content","getComments","message","createComment","getState","removeComment","commentId","comments","getCommentsLoadingStatus"],"sources":["/Users/natellaverde/Проекты/MC_Portfolio/src/app/store/comments.js"],"sourcesContent":["import { createAction, createSlice } from \"@reduxjs/toolkit\";\nimport commentService from \"../services/comment.service\";\nconst commentsSlice = createSlice({\n    name: \"comments\",\n    initialState: {\n        entities: null,\n        isLoading: true,\n        error: null\n    },\n    reducers: {\n        commentsRequested: (state) => {\n            state.isLoading = true;\n        },\n        commentsReceived: (state, action) => {\n            state.entities = action.payload;\n            state.isLoading = false;\n        },\n        commentsRequestFiled: (state, action) => {\n            state.error = action.payload;\n            state.isLoading = false;\n        },\n        commentCreated: (state, action) => {\n            state.entities.push(action.payload);\n        },\n        commentRemoved: (state, action) => {\n            state.entities = state.entities.filter(\n                (c) => c._id !== action.payload\n            );\n        }\n    }\n});\n\nconst { reducer: commentsReducer, actions } = commentsSlice;\nconst {\n    commentsRequested,\n    commentsReceived,\n    commentsRequestFiled,\n    commentCreated,\n    commentRemoved\n} = actions;\n\nconst addCommentRequested = createAction(\"comments/addCommentRequested\");\nconst removeCommentRequested = createAction(\"comments/removeCommentRequested\");\n\nexport const loadCommentsList = (userId) => async (dispatch) => {\n    dispatch(commentsRequested());\n    try {\n        const { content } = await commentService.getComments(userId);\n        dispatch(commentsReceived(content));\n    } catch (error) {\n        dispatch(commentsRequestFiled(error.message));\n    }\n};\nexport const createComment = (payload) => async (dispatch, getState) => {\n    dispatch(addCommentRequested());\n    try {\n        const { content } = await commentService.createComment(payload);\n        dispatch(commentCreated(content));\n    } catch (error) {\n        dispatch(commentsRequestFiled(error.message));\n    }\n};\nexport const removeComment = (commentId) => async (dispatch) => {\n    dispatch(removeCommentRequested());\n    try {\n        const { content } = await commentService.removeComment(commentId);\n        if (!content) {\n            dispatch(commentRemoved(commentId));\n        }\n    } catch (error) {\n        dispatch(commentsRequestFiled(error.message));\n    }\n};\n\nexport const getComments = () => (state) => state.comments.entities;\nexport const getCommentsLoadingStatus = () => (state) =>\n    state.comments.isLoading;\n\nexport default commentsReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}