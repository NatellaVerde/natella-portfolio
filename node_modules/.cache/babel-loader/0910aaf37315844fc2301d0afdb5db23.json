{"ast":null,"code":"import { getMainCarrier } from '@sentry/core';\nimport { isNodeEnv, logger, isNaN, loadModule, dynamicRequire } from '@sentry/utils';\nimport { registerErrorInstrumentation } from './errors.js';\nimport { IdleTransaction } from './idletransaction.js';\nimport { Transaction } from './transaction.js';\nimport { hasTracingEnabled } from './utils.js';\n\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders() {\n  const scope = this.getScope();\n  if (scope) {\n    const span = scope.getSpan();\n    if (span) {\n      return {\n        'sentry-trace': span.toTraceparent()\n      };\n    }\n  }\n  return {};\n}\n\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param transaction: The transaction needing a sampling decision\n * @param options: The current client's options, so we can access `tracesSampleRate` and/or `tracesSampler`\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\nfunction sample(transaction, options, samplingContext) {\n  // nothing to do if tracing is not enabled\n  if (!hasTracingEnabled(options)) {\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n  if (transaction.sampled !== undefined) {\n    transaction.setMetadata({\n      sampleRate: Number(transaction.sampled)\n    });\n    return transaction;\n  }\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext);\n    transaction.setMetadata({\n      sampleRate: Number(sampleRate)\n    });\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n  } else {\n    sampleRate = options.tracesSampleRate;\n    transaction.setMetadata({\n      sampleRate: Number(sampleRate)\n    });\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n  if (!isValidSampleRate(sampleRate)) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('[Tracing] Discarding transaction because of invalid sample rate.');\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!sampleRate) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(`[Tracing] Discarding transaction because ${typeof options.tracesSampler === 'function' ? 'tracesSampler returned 0 or false' : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'}`);\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  transaction.sampled = Math.random() < sampleRate;\n\n  // if we're not going to keep it, we're done\n  if (!transaction.sampled) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(`[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(sampleRate)})`);\n    return transaction;\n  }\n  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(`[Tracing] starting ${transaction.op} transaction - ${transaction.name}`);\n  return transaction;\n}\n\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\nfunction isValidSampleRate(rate) {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(rate)} of type ${JSON.stringify(typeof rate)}.`);\n    return false;\n  }\n\n  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n  if (rate < 0 || rate > 1) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${rate}.`);\n    return false;\n  }\n  return true;\n}\n\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\nfunction _startTransaction(transactionContext, customSamplingContext) {\n  const client = this.getClient();\n  const options = client && client.getOptions() || {};\n  const configInstrumenter = options.instrumenter || 'sentry';\n  const transactionInstrumenter = transactionContext.instrumenter || 'sentry';\n  if (configInstrumenter !== transactionInstrumenter) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error(`A transaction was started with instrumenter=\\`${transactionInstrumenter}\\`, but the SDK is configured with the \\`${configInstrumenter}\\` instrumenter.\nThe transaction will not be sampled. Please use the ${configInstrumenter} instrumentation to start transactions.`);\n    transactionContext.sampled = false;\n  }\n  let transaction = new Transaction(transactionContext, this);\n  transaction = sample(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext\n  });\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && options._experiments.maxSpans);\n  }\n  return transaction;\n}\n\n/**\n * Create new idle transaction.\n */\nfunction startIdleTransaction(hub, transactionContext, idleTimeout, finalTimeout, onScope, customSamplingContext, heartbeatInterval) {\n  const client = hub.getClient();\n  const options = client && client.getOptions() || {};\n  let transaction = new IdleTransaction(transactionContext, hub, idleTimeout, finalTimeout, heartbeatInterval, onScope);\n  transaction = sample(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext\n  });\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && options._experiments.maxSpans);\n  }\n  return transaction;\n}\n\n/**\n * @private\n */\nfunction _addTracingExtensions() {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n  if (!carrier.__SENTRY__.extensions.startTransaction) {\n    carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n  }\n  if (!carrier.__SENTRY__.extensions.traceHeaders) {\n    carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n  }\n}\n\n/**\n * @private\n */\nfunction _autoloadDatabaseIntegrations() {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  const packageToIntegrationMapping = {\n    mongodb() {\n      const integration = dynamicRequire(module, './integrations/node/mongo');\n      return new integration.Mongo();\n    },\n    mongoose() {\n      const integration = dynamicRequire(module, './integrations/node/mongo');\n      return new integration.Mongo({\n        mongoose: true\n      });\n    },\n    mysql() {\n      const integration = dynamicRequire(module, './integrations/node/mysql');\n      return new integration.Mysql();\n    },\n    pg() {\n      const integration = dynamicRequire(module, './integrations/node/postgres');\n      return new integration.Postgres();\n    }\n  };\n  const mappedPackages = Object.keys(packageToIntegrationMapping).filter(moduleName => !!loadModule(moduleName)).map(pkg => {\n    try {\n      return packageToIntegrationMapping[pkg]();\n    } catch (e) {\n      return undefined;\n    }\n  }).filter(p => p);\n  if (mappedPackages.length > 0) {\n    carrier.__SENTRY__.integrations = [...(carrier.__SENTRY__.integrations || []), ...mappedPackages];\n  }\n}\n\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nfunction addExtensionMethods() {\n  _addTracingExtensions();\n\n  // Detect and automatically load specified integrations.\n  if (isNodeEnv()) {\n    _autoloadDatabaseIntegrations();\n  }\n\n  // If an error happens globally, we should make sure transaction status is set to error.\n  registerErrorInstrumentation();\n}\nexport { _addTracingExtensions, addExtensionMethods, startIdleTransaction };","map":{"version":3,"sources":["../../../src/hubextensions.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Hub } from '@sentry/core';\nimport { getMainCarrier } from '@sentry/core';\nimport type {\n  ClientOptions,\n  CustomSamplingContext,\n  Integration,\n  IntegrationClass,\n  Options,\n  SamplingContext,\n  TransactionContext,\n} from '@sentry/types';\nimport { dynamicRequire, isNaN, isNodeEnv, loadModule, logger } from '@sentry/utils';\n\nimport { registerErrorInstrumentation } from './errors';\nimport { IdleTransaction } from './idletransaction';\nimport { Transaction } from './transaction';\nimport { hasTracingEnabled } from './utils';\n\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders(this: Hub): { [key: string]: string } {\n  const scope = this.getScope();\n  if (scope) {\n    const span = scope.getSpan();\n    if (span) {\n      return {\n        'sentry-trace': span.toTraceparent(),\n      };\n    }\n  }\n  return {};\n}\n\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param transaction: The transaction needing a sampling decision\n * @param options: The current client's options, so we can access `tracesSampleRate` and/or `tracesSampler`\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\nfunction sample<T extends Transaction>(\n  transaction: T,\n  options: Pick<Options, 'tracesSampleRate' | 'tracesSampler'>,\n  samplingContext: SamplingContext,\n): T {\n  // nothing to do if tracing is not enabled\n  if (!hasTracingEnabled(options)) {\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n  if (transaction.sampled !== undefined) {\n    transaction.setMetadata({\n      sampleRate: Number(transaction.sampled),\n    });\n    return transaction;\n  }\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext);\n    transaction.setMetadata({\n      sampleRate: Number(sampleRate),\n    });\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n  } else {\n    sampleRate = options.tracesSampleRate;\n    transaction.setMetadata({\n      sampleRate: Number(sampleRate),\n    });\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n  if (!isValidSampleRate(sampleRate)) {\n    __DEBUG_BUILD__ && logger.warn('[Tracing] Discarding transaction because of invalid sample rate.');\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!sampleRate) {\n    __DEBUG_BUILD__ &&\n      logger.log(\n        `[Tracing] Discarding transaction because ${\n          typeof options.tracesSampler === 'function'\n            ? 'tracesSampler returned 0 or false'\n            : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'\n        }`,\n      );\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  transaction.sampled = Math.random() < (sampleRate as number | boolean);\n\n  // if we're not going to keep it, we're done\n  if (!transaction.sampled) {\n    __DEBUG_BUILD__ &&\n      logger.log(\n        `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(\n          sampleRate,\n        )})`,\n      );\n    return transaction;\n  }\n\n  __DEBUG_BUILD__ && logger.log(`[Tracing] starting ${transaction.op} transaction - ${transaction.name}`);\n  return transaction;\n}\n\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\nfunction isValidSampleRate(rate: unknown): boolean {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    __DEBUG_BUILD__ &&\n      logger.warn(\n        `[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n          rate,\n        )} of type ${JSON.stringify(typeof rate)}.`,\n      );\n    return false;\n  }\n\n  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n  if (rate < 0 || rate > 1) {\n    __DEBUG_BUILD__ &&\n      logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${rate}.`);\n    return false;\n  }\n  return true;\n}\n\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\nfunction _startTransaction(\n  this: Hub,\n  transactionContext: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): Transaction {\n  const client = this.getClient();\n  const options: Partial<ClientOptions> = (client && client.getOptions()) || {};\n\n  const configInstrumenter = options.instrumenter || 'sentry';\n  const transactionInstrumenter = transactionContext.instrumenter || 'sentry';\n\n  if (configInstrumenter !== transactionInstrumenter) {\n    __DEBUG_BUILD__ &&\n      logger.error(\n        `A transaction was started with instrumenter=\\`${transactionInstrumenter}\\`, but the SDK is configured with the \\`${configInstrumenter}\\` instrumenter.\nThe transaction will not be sampled. Please use the ${configInstrumenter} instrumentation to start transactions.`,\n      );\n\n    transactionContext.sampled = false;\n  }\n\n  let transaction = new Transaction(transactionContext, this);\n  transaction = sample(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext,\n  });\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && (options._experiments.maxSpans as number));\n  }\n  return transaction;\n}\n\n/**\n * Create new idle transaction.\n */\nexport function startIdleTransaction(\n  hub: Hub,\n  transactionContext: TransactionContext,\n  idleTimeout: number,\n  finalTimeout: number,\n  onScope?: boolean,\n  customSamplingContext?: CustomSamplingContext,\n  heartbeatInterval?: number,\n): IdleTransaction {\n  const client = hub.getClient();\n  const options: Partial<ClientOptions> = (client && client.getOptions()) || {};\n\n  let transaction = new IdleTransaction(transactionContext, hub, idleTimeout, finalTimeout, heartbeatInterval, onScope);\n  transaction = sample(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext,\n  });\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && (options._experiments.maxSpans as number));\n  }\n  return transaction;\n}\n\n/**\n * @private\n */\nexport function _addTracingExtensions(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n  if (!carrier.__SENTRY__.extensions.startTransaction) {\n    carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n  }\n  if (!carrier.__SENTRY__.extensions.traceHeaders) {\n    carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n  }\n}\n\n/**\n * @private\n */\nfunction _autoloadDatabaseIntegrations(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n\n  const packageToIntegrationMapping: Record<string, () => Integration> = {\n    mongodb() {\n      const integration = dynamicRequire(module, './integrations/node/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo();\n    },\n    mongoose() {\n      const integration = dynamicRequire(module, './integrations/node/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo({ mongoose: true });\n    },\n    mysql() {\n      const integration = dynamicRequire(module, './integrations/node/mysql') as {\n        Mysql: IntegrationClass<Integration>;\n      };\n      return new integration.Mysql();\n    },\n    pg() {\n      const integration = dynamicRequire(module, './integrations/node/postgres') as {\n        Postgres: IntegrationClass<Integration>;\n      };\n      return new integration.Postgres();\n    },\n  };\n\n  const mappedPackages = Object.keys(packageToIntegrationMapping)\n    .filter(moduleName => !!loadModule(moduleName))\n    .map(pkg => {\n      try {\n        return packageToIntegrationMapping[pkg]();\n      } catch (e) {\n        return undefined;\n      }\n    })\n    .filter(p => p) as Integration[];\n\n  if (mappedPackages.length > 0) {\n    carrier.__SENTRY__.integrations = [...(carrier.__SENTRY__.integrations || []), ...mappedPackages];\n  }\n}\n\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nexport function addExtensionMethods(): void {\n  _addTracingExtensions();\n\n  // Detect and automatically load specified integrations.\n  if (isNodeEnv()) {\n    _autoloadDatabaseIntegrations();\n  }\n\n  // If an error happens globally, we should make sure transaction status is set to error.\n  registerErrorInstrumentation();\n}\n"]},"metadata":{},"sourceType":"module"}